<VisualMicro>
  <Program Name="MCB_single_motor" Ext=".ino" Location="D:\Trevor\My Documents\Arduino\MCB_single_motor">
    <Compile IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Trevor\AppData\Local\Temp\VMBuilds\MCB_single_motor\teensy31\Debug" ReCompileIfSourceIsNewer="1" SketchName="MCB_single_motor" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_TEENSY;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="teensy" Platform="teensy3" Architecture="hardware">
      <Board Name="teensy31" Description="Teensy 3.2 / 3.1" CoreFolder="D:\Programs\Arduino\hardware\teensy\avr\cores\teensy3" VariantFullPath="" McuIdePath="D:\Programs\Arduino" McuSketchBookPath="D:\Trevor\My Documents\Arduino" name="Teensy 3.2 / 3.1" upload.maximum_size="262144" upload.maximum_data_size="65536" upload.tool="teensyloader" upload.protocol="halfkay" build.board="TEENSY31" build.core="teensy3" build.mcu="mk20dx256" build.warn_data_percentage="97" build.toolchain="arm/bin/" build.command.gcc="arm-none-eabi-gcc" build.command.ar="arm-none-eabi-gcc-ar" build.command.objcopy="arm-none-eabi-objcopy" build.command.objdump="arm-none-eabi-objdump" build.command.size="arm-none-eabi-size" build.flags.common="-g -Wall -ffunction-sections -fdata-sections -nostdlib" build.flags.dep="-MMD" build.flags.optimize="-O2 --specs=nosys.specs" build.flags.cpu="-mthumb -mcpu=cortex-m4 -fsingle-precision-constant" build.flags.defs="-D__MK20DX256__ -DTEENSYDUINO=134" build.flags.cpp="-fno-exceptions -felide-constructors -std=gnu++0x -fno-rtti" build.flags.c="" build.flags.S="-x assembler-with-cpp" build.flags.ld="-Wl,--gc-sections,--relax,--defsym=__rtc_localtime={extra.time.local} &quot;-T{build.core.path}/mk20dx256.ld&quot;" build.flags.libs="-larm_cortexM4l_math -lm" serial.restart_cmd="false" menu.usb.serial="Serial" menu.usb.serial.build.usbtype="USB_SERIAL" menu.usb.keyboard="Keyboard" menu.usb.keyboard.build.usbtype="USB_KEYBOARDONLY" menu.usb.keyboard.fake_serial="teensy_gateway" menu.usb.touch="Keyboard + Touch Screen" menu.usb.touch.build.usbtype="USB_TOUCHSCREEN" menu.usb.touch.fake_serial="teensy_gateway" menu.usb.hidtouch="Keyboard + Mouse + Touch Screen" menu.usb.hidtouch.build.usbtype="USB_HID_TOUCHSCREEN" menu.usb.hidtouch.fake_serial="teensy_gateway" menu.usb.hid="Keyboard + Mouse + Joystick" menu.usb.hid.build.usbtype="USB_HID" menu.usb.hid.fake_serial="teensy_gateway" menu.usb.serialhid="Serial + Keyboard + Mouse + Joystick" menu.usb.serialhid.build.usbtype="USB_SERIAL_HID" menu.usb.midi="MIDI" menu.usb.midi.build.usbtype="USB_MIDI" menu.usb.midi.fake_serial="teensy_gateway" menu.usb.serialmidi="Serial + MIDI" menu.usb.serialmidi.build.usbtype="USB_MIDI_SERIAL" menu.usb.audio="Audio" menu.usb.audio.build.usbtype="USB_AUDIO" menu.usb.audio.fake_serial="teensy_gateway" menu.usb.serialmidiaudio="Serial + MIDI + Audio" menu.usb.serialmidiaudio.build.usbtype="USB_MIDI_AUDIO_SERIAL" menu.usb.rawhid="Raw HID" menu.usb.rawhid.build.usbtype="USB_RAWHID" menu.usb.rawhid.fake_serial="teensy_gateway" menu.usb.flightsim="Flight Sim Controls" menu.usb.flightsim.build.usbtype="USB_FLIGHTSIM" menu.usb.flightsim.fake_serial="teensy_gateway" menu.usb.flightsimjoystick="Flight Sim Controls + Joystick" menu.usb.flightsimjoystick.build.usbtype="USB_FLIGHTSIM_JOYSTICK" menu.usb.flightsimjoystick.fake_serial="teensy_gateway" menu.usb.everything="All of the Above" menu.usb.everything.build.usbtype="USB_EVERYTHING" menu.usb.disable="No USB" menu.usb.disable.build.usbtype="USB_DISABLED" menu.speed.96="96 MHz (overclock)" menu.speed.72="72 MHz" menu.speed.48="48 MHz" menu.speed.24="24 MHz" menu.speed.16="16 MHz (No USB)" menu.speed.8="8 MHz (No USB)" menu.speed.4="4 MHz (No USB)" menu.speed.2="2 MHz (No USB)" menu.speed.120="120 MHz (overclock)" menu.speed.168.build.fcpu="168000000" menu.speed.144.build.fcpu="144000000" menu.speed.120.build.fcpu="120000000" menu.speed.96.build.fcpu="96000000" menu.speed.72.build.fcpu="72000000" menu.speed.48.build.fcpu="48000000" menu.speed.24.build.fcpu="24000000" menu.speed.16.build.fcpu="16000000" menu.speed.8.build.fcpu="8000000" menu.speed.4.build.fcpu="4000000" menu.speed.2.build.fcpu="2000000" menu.opt.o1std="Fast" menu.opt.o1std.build.flags.optimize="-O1 --specs=nosys.specs" menu.opt.o1std.build.flags.ldspecs="" menu.opt.o2std="Faster" menu.opt.o2std.build.flags.optimize="-O2 --specs=nosys.specs" menu.opt.o2std.build.flags.ldspecs="" menu.opt.osstd="Smallest Code" menu.opt.osstd.build.flags.optimize="-Os --specs=nosys.specs" menu.opt.osstd.build.flags.ldspecs="" menu.keys.en-us="US English" menu.keys.en-us.build.keylayout="US_ENGLISH" menu.keys.fr-ca="Canadian French" menu.keys.fr-ca.build.keylayout="CANADIAN_FRENCH" menu.keys.xx-ca="Canadian Multilingual" menu.keys.xx-ca.build.keylayout="CANADIAN_MULTILINGUAL" menu.keys.cz-cz="Czech" menu.keys.cz-cz.build.keylayout="CZECH" menu.keys.da-da="Danish" menu.keys.da-da.build.keylayout="DANISH" menu.keys.fi-fi="Finnish" menu.keys.fi-fi.build.keylayout="FINNISH" menu.keys.fr-fr="French" menu.keys.fr-fr.build.keylayout="FRENCH" menu.keys.fr-be="French Belgian" menu.keys.fr-be.build.keylayout="FRENCH_BELGIAN" menu.keys.fr-ch="French Swiss" menu.keys.fr-ch.build.keylayout="FRENCH_SWISS" menu.keys.de-de="German" menu.keys.de-de.build.keylayout="GERMAN" menu.keys.de-dm="German (Mac)" menu.keys.de-dm.build.keylayout="GERMAN_MAC" menu.keys.de-ch="German Swiss" menu.keys.de-ch.build.keylayout="GERMAN_SWISS" menu.keys.is-is="Icelandic" menu.keys.is-is.build.keylayout="ICELANDIC" menu.keys.en-ie="Irish" menu.keys.en-ie.build.keylayout="IRISH" menu.keys.it-it="Italian" menu.keys.it-it.build.keylayout="ITALIAN" menu.keys.no-no="Norwegian" menu.keys.no-no.build.keylayout="NORWEGIAN" menu.keys.pt-pt="Portuguese" menu.keys.pt-pt.build.keylayout="PORTUGUESE" menu.keys.pt-br="Portuguese Brazilian" menu.keys.pt-br.build.keylayout="PORTUGUESE_BRAZILIAN" menu.keys.rs-rs="Serbian (Latin Only)" menu.keys.rs-rs.build.keylayout="SERBIAN_LATIN_ONLY" menu.keys.es-es="Spanish" menu.keys.es-es.build.keylayout="SPANISH" menu.keys.es-mx="Spanish Latin America" menu.keys.es-mx.build.keylayout="SPANISH_LATIN_AMERICA" menu.keys.sv-se="Swedish" menu.keys.sv-se.build.keylayout="SWEDISH" menu.keys.tr-tr="Turkish (partial)" menu.keys.tr-tr.build.keylayout="TURKISH" menu.keys.en-gb="United Kingdom" menu.keys.en-gb.build.keylayout="UNITED_KINGDOM" menu.keys.usint="US International" menu.keys.usint.build.keylayout="US_INTERNATIONAL" vid.0="0x16C0" vid.1="0x16C0" vid.2="0x16C0" vid.3="0x16C0" vid.4="0x16C0" pid.0="0x0483" pid.1="0x0487" pid.2="0x0489" pid.3="0x048A" pid.4="0x0476" runtime.ide.path="D:\Programs\Arduino" runtime.os="windows" build.system.path="D:\Programs\Arduino\hardware\teensy\avr\system" runtime.ide.version="10801" target_package="teensy" target_platform="teensy3" runtime.hardware.path="D:\Programs\Arduino\hardware\teensy" originalid="teensy31" build.flags.ldspecs="" intellisense.include.paths.more="{build.core.vmresolved}\utils;{build.core.vmresolved}\avr;{compiler.path}{build.toolchain}..\arm-none-eabi\include;" version="1.6.7" rewriting="disabled" compiler.path="{runtime.hardware.path}/../tools/" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" recipe.preproc.includes="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -M -MG -MP -x c++ -w {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot;" recipe.preproc.macros="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -E -CC -x c++ -w {compiler.cpp.flags} {build.flags.common} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.c.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.gcc}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.c} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.gcc}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.S} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{build.toolchain}{build.command.ar}&quot; rcs &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{build.toolchain}{build.command.gcc}&quot; {build.flags.optimize} {build.flags.ld} {build.flags.ldspecs} {build.flags.cpu} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; {build.flags.libs}" recipe.elfpatch.pattern="&quot;{compiler.path}/hardware/tools/{build.elfpatch}&quot; -mmcu={build.mcu} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{sketch_path}/disk&quot;" recipe.objcopy.eep.pattern="&quot;{compiler.path}{build.toolchain}{build.command.objcopy}&quot; {compiler.objcopy.eep.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{build.toolchain}{build.command.objcopy}&quot; {compiler.elf2hex.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.hooks.postbuild.1.pattern="&quot;{compiler.path}/teensy_post_compile&quot; &quot;-file={build.project_name}&quot; &quot;-path={build.path}&quot; &quot;-tools={compiler.path}&quot; &quot;-board={build.board}&quot;" recipe.size.pattern="&quot;{compiler.path}{build.toolchain}{build.command.size}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.usbdescriptortable|\.dmabuffers|\.usbbuffers|\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" tools.teensyloader.cmd.path="{runtime.hardware.path}/../tools" tools.teensyloader.upload.params.quiet="" tools.teensyloader.upload.params.verbose="-verbose" tools.teensyloader.upload.pattern="&quot;{cmd.path}/teensy_post_compile&quot; -test &quot;-file={build.project_name}&quot; &quot;-path={build.path}&quot; &quot;-tools={cmd.path}&quot; &quot;-board={build.board}&quot; -reboot" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.board}.hex" recipe.output.tmp_file2="{build.project_name}.elf" recipe.output.save_file2="{build.project_name}.elf" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\u0agi2pv.vsa\Micro Platforms\arduino16x" runtime.tools.arduinoOTA.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.0.0.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino8.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.3-arduino2.path="D:\Programs\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="D:\Programs\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="teensy31" runtime.vm.boardinfo.name="teensy31" runtime.vm.boardinfo.desc="Teensy 3.2 / 3.1" runtime.vm.boardinfo.src_location="D:\Programs\Arduino\hardware\teensy\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="D:\Trevor\My Documents\Arduino" build.core.vmresolved="D:\Programs\Arduino\hardware\teensy\avr\cores\teensy3" build.core.parentfolder.vmresolved="D:\Programs\Arduino\hardware\teensy\avr\cores" build.core.coresparentfolder.vmresolved="D:\Programs\Arduino\hardware\teensy\avr" build.core.path="D:\Programs\Arduino\hardware\teensy\avr\cores\teensy3" vm.core.include="arduino.h" vm.boardsource.path="D:\Programs\Arduino\hardware\teensy\avr" runtime.platform.path="D:\Programs\Arduino\hardware\teensy\avr" vm.platformname.name="teensy3" build.arch="TEENSY3" build.usbtype="USB_SERIAL" build.fcpu="72000000" build.keylayout="US_ENGLISH" builder.noino="false" build.architecture="hardware" vmresolved.compiler.path="D:\Programs\Arduino\hardware\tools\" vmresolved.tools.path="D:\Programs\Arduino\hardware" build.path="C:\Users\Trevor\AppData\Local\Temp\VMBuilds\MCB_single_motor\teensy31\Debug" build.project_name="MCB_single_motor.ino" build.project_path="D:\Trevor\My Documents\Arduino\MCB_single_motor" ProjectDir="D:\Trevor\My Documents\Arduino\MCB_single_motor\" vm.runtime.compiler.showwarnings="true" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM11" serial.port="COM11" serial.port.num="11" serial.port.caption="COM11 - Teensy USB Serial" serial.Caption="Teensy USB Serial (COM11)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Teensy USB Serial" serial.DeviceID="USB\VID_16C0&amp;PID_0483\896500" serial.HardwareID.value0="USB\VID_16C0&amp;PID_0483" serial.Manufacturer="PJRC.COM, LLC." serial.Name="Teensy USB Serial (COM11)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_16C0&amp;PID_0483\896500" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="TLB" serial.vid="0x16C0" serial.pid="0x0483" serial.iserial="896500" serial.port.iserial="896500" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\Trevor\AppData\Local\Temp\VMBuilds\MCB_single_motor\teensy31\Debug" />
    </Platform>
    <Debug EnableBreak="1" StartUpMessage="Teensy is alive" StartUpPause="1" BandWidthThrottleEnabled="0" AutoReportAnalogPinsFrequencyType="0" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="MCBmodule.cpp, line 63" Id="88e8a29a-ca49-46e6-98c9-5bde0375907f" Enabled="0" Message="{countError_} {effort_} {tmp}" MessageTextType="2" PreProcessedMessage="{0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcbmodule.cpp" FileLine="63" FileColumn="1" FunctionName="step(void)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='88e8a29a-ca49-46e6-98c9-5bde0375907f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>56			countError_ = countDesired_ - readCount();
57	
58			// step PID controller to compute effort in Amps
59			effort_ = PID_.step(float(countError_));
60	
61			// enforce max current bounds and convert to int16 for DAC
62			tmp = convertEffortToDAC(effort_);
--&gt;63	
64		}
65	
66		return tmp;
67	}
68	
69	float MCBmodule::getEffort(void)
70	{
71		return effort_;
72	}
</Source>
        <MessageVariables>
          <MessageVariable Name="countError_" Index="1" />
          <MessageVariable Name="effort_" Index="2" />
          <MessageVariable Name="tmp" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="MCB_single_motor.ino, line 46" Id="4d16993a-0502-441a-92c7-1b023855786e" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb_single_motor.ino" FileLine="46" FileColumn="1" FunctionName="setup()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4d16993a-0502-441a-92c7-1b023855786e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>39	{
40	
41		MotorBoard.init();
42		
43		MotorBoard.modules.at(0).setGains(kp, ki, kd);
44		
45		MotorBoard.modules.at(0).setCountDesired(countDesired);
--&gt;46	
47		MotorBoard.enableAllAmps(); // enable amp
48	
49		startTime = millis();
50	
51		PIDTimer.begin(PIDTimerISR, timeStepPID); // attach function and call every timeStepPID [us]
52	}
53	
54	void loop()
55	{
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="MCB.cpp, line 125" Id="0fd0cccb-7f02-4717-91a2-cd954d5c1303" Enabled="0" Message="{val[0]}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb.cpp" FileLine="125" FileColumn="1" FunctionName="setDACs(Int16Vec const &amp;val)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0fd0cccb-7f02-4717-91a2-cd954d5c1303'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>118	{
119		LEDG_.at(position) = state;
120		digitalWriteFast(pins.LEDG[position], LEDG_.at(position));
121	}
122	
123	void MCB::setDACs(Int16Vec const &amp;val)
124	{
--&gt;125	
126		DAC_.beginTransfer();
127		
128		for (uint8_t bb = 0; bb &lt; val.size(); bb++)
129		{
130			DAC_.set(val.at(bb));
131		}
132		
133		DAC_.endTransfer();
134	}
</Source>
        <MessageVariables>
          <MessageVariable Name="val[0]" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="MCB.cpp, line 56" Id="280ad694-119d-4152-878b-2176513d8000" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb.cpp" FileLine="56" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='280ad694-119d-4152-878b-2176513d8000'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>49		SPI.begin();
50		
51		// create and initialize each module (along with each encoder IC)
52		for (uint8_t aa = 0; aa &lt; numModules_; aa++)
53		{
54			addModule(aa);
55		}
--&gt;56		
57		// initialize DACs
58		DAC_.beginTransfer();
59		for (uint8_t bb = 0; bb &lt; numModules_; bb++)
60		{
61			DAC_.reset(); // software reset
62		}
63		DAC_.endTransfer();
64		
65		DAC_.beginTransfer();
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="MCB.cpp, line 41" Id="1aecaa87-d976-4502-a46f-11cf8e04c796" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb.cpp" FileLine="41" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1aecaa87-d976-4502-a46f-11cf8e04c796'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>34	
35	void MCB::init(void)
36	// initializes all modules (to be called only after all addModule commands)
37	{
38	
39		// initialize MCB pins
40		pins.init();
--&gt;41	
42		// initialize encoder clock for LS7366R
43		si5351_.init(SI5351_CRYSTAL_LOAD_8PF, 0);
44		si5351_.set_freq(3000000000ULL, 0ULL, SI5351_CLK0); // Set CLK1 to output 30 MHz
45		si5351_.output_enable(SI5351_CLK1, 0); // Disable other clocks
46		si5351_.output_enable(SI5351_CLK2, 0);
47		
48		// initialize SPI
49		SPI.begin();
50		
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="MCB.cpp, line 64" Id="03cbd273-2f97-471d-b792-6a6969eccb47" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb.cpp" FileLine="64" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="28" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='03cbd273-2f97-471d-b792-6a6969eccb47'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>57		// initialize DACs
58		DAC_.beginTransfer();
59		for (uint8_t bb = 0; bb &lt; numModules_; bb++)
60		{
61			DAC_.reset(); // software reset
62		}
63		DAC_.endTransfer();
--&gt;64		
65		DAC_.beginTransfer();
66		for (uint8_t bb = 0; bb &lt; numModules_; bb++)
67		{
68			DAC_.init(); // setup ctrl register
69		}
70		DAC_.endTransfer();
71	
72		DAC_.beginTransfer();
73		for (uint8_t bb = 0; bb &lt; numModules_; bb++)
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="MCBmodule.cpp, line 41" Id="e5aa9e31-fb78-4535-bdb7-2399c1ae3e90" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcbmodule.cpp" FileLine="41" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e5aa9e31-fb78-4535-bdb7-2399c1ae3e90'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>34		ENC_.init(); // set up encoder IC (LS7366R)
35		PID_.init(kp, ki, kd); // set up PID controller
36		setStatus(MODULE_ENABLE);
37	}
38	
39	void MCBmodule::init(void)
40	{
--&gt;41	
42		ENC_.init(); // set up encoder IC (LS7366R)
43	
44		PID_.init(); // set up PID controller; gains all set to 0.0
45	
46		setStatus(MODULE_ENABLE);
47	
48	}
49	
50	int16_t MCBmodule::step(void)
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="MCBmodule.cpp, line 47" Id="9e786784-a507-4bfc-99e7-1cfcb1b68e32" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcbmodule.cpp" FileLine="47" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9e786784-a507-4bfc-99e7-1cfcb1b68e32'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>40	{
41	
42		ENC_.init(); // set up encoder IC (LS7366R)
43	
44		PID_.init(); // set up PID controller; gains all set to 0.0
45	
46		setStatus(MODULE_ENABLE);
--&gt;47	
48	}
49	
50	int16_t MCBmodule::step(void)
51	{
52		int16_t tmp = 0;
53	
54		if (getStatus()){
55			// read current motor position and compute error
56			countError_ = countDesired_ - readCount();
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="MCB.cpp, line 78" Id="36f24d20-fa22-4b96-a796-483c7aa775d6" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb.cpp" FileLine="78" FileColumn="1" FunctionName="init(void)" FunctionLineOffset="42" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='36f24d20-fa22-4b96-a796-483c7aa775d6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>71	
72		DAC_.beginTransfer();
73		for (uint8_t bb = 0; bb &lt; numModules_; bb++)
74		{
75			DAC_.set(0); // Set output to 0 volts
76		}
77		DAC_.endTransfer();
--&gt;78	
79		// enable motor amp outputs and turn on green LEDs
80		for (uint8_t aa = 0; aa &lt; numModules_; aa++)
81		{
82			// software brakes (HIGH = amps enabled)
83			digitalWriteFast(pins.ampEnable[aa], HIGH);
84	
85			setLEDG(aa, HIGH);
86		}
87	
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="MCB_single_motor.ino, line 89" Id="542f4e39-23f6-461b-bcd2-445dea05bd70" Enabled="1" Message="{MotorBoard.modules.at(0).getError()} {MotorBoard.modules.at(0).getEffort(),4}" MessageTextType="2" PreProcessedMessage="{0} {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\trevor\my documents\arduino\mcb_single_motor\mcb_single_motor.ino" FileLine="89" FileColumn="1" FunctionName="loop()" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="100" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='542f4e39-23f6-461b-bcd2-445dea05bd70'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>82			}
83	
84			loopLedState = !loopLedState;
85			digitalWriteFast(MotorBoard.pins.LEDG[1], loopLedState);
86	
87			lastTime = millis();
88		}
--&gt;89			
90	}
91	
92	void PIDTimerISR(void)
93	{
94		MotorBoard.stepPID();
95		MotorBoard.setLEDG(0, pidLedState);
96		pidLedState = !pidLedState;
97	}
</Source>
        <MessageVariables>
          <MessageVariable Name="MotorBoard.modules.at(0).getError()" Index="1" />
          <MessageVariable Name="MotorBoard.modules.at(0).getEffort(),4" Index="2" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>